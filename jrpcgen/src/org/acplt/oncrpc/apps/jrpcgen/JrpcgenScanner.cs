/* The following code was generated by CSFlex 1.4 on 12/20/2009 */

// #line 1 "JrpcgenScanner.flex"
/*
 * $Header: /cvsroot/remotetea/remotetea/src/org/acplt/oncrpc/apps/jrpcgen/JrpcgenScanner.flex,v 1.1.1.1 2003/08/13 12:03:47 haraldalbrecht Exp $
 *
 * Copyright (c) 1999, 2000
 * Lehrstuhl fuer Prozessleittechnik (PLT), RWTH Aachen
 * D-52064 Aachen, Germany.
 * All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Library General Public License as
 * published by the Free Software Foundation; either version 2 of the
 * License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Library General Public License for more details.
 *
 * You should have received a copy of the GNU Library General Public
 * License along with this program (see the file COPYING.LIB for more
 * details); if not, write to the Free Software Foundation, Inc.,
 * 675 Mass Ave, Cambridge, MA 02139, USA.
 */

/*
 * To compile into java code use:
 *   java -jar <whereever/>JFlex.jar JrpcgenScanner.flex
 */

using TUVienna.CS_CUP.Runtime;
using System.Text;
using System.IO;
using System;
namespace org.acplt.oncrpc.apps.jrpcgen {

#line default
/**
 * This class is a scanner generated by <a href="http://www.sourceforge.net/projects/csflex/">C# Flex</a>, based on
 * <a href="http://www.jflex.de/">JFlex</a>, version 1.4
 * on 12/20/2009 from the specification file
 * <tt>JrpcgenScanner.flex</tt>
 */
class JrpcgenScanner : Scanner {
  /** This character denotes the end of file */
  public const int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private const int ZZ_BUFFERSIZE = 16384;
  /**
   * This is used in 'if' statements to eliminate dead code
   * warnings for 'break;' after the end of a user action
   * block of code. The Java version does this by emitting
   * a second 'case' which is impossible to reach. Since this
   * is impossible for the compiler to deduce during semantic
   * analysis, the warning is stifled. However, C# does not
   * permit 'case' blocks to flow into each other, so the C#
   * output mode needs a different approach. In this case,
   * the entire user code is wrapped up in an 'if' statement
   * whose condition is always true. No warning is emitted
   * because the compiler doesn't strictly propagate the value
   * of 'static readonly' fields, and thus does not semantically
   * detect the fact that the 'if' will always be true.
   */
   public static readonly bool ZZ_SPURIOUS_WARNINGS_SUCK = true;

  /** lexical states */
  public const int YYINITIAL = 0;
  static JrpcgenScanner()
  {
    ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);
    ZZ_ACTION = zzUnpackAction();
    ZZ_ROWMAP = zzUnpackRowMap();
    ZZ_TRANS = zzUnpackTrans();
    ZZ_ATTRIBUTE = zzUnpackAttribute();
  }


  /** 
   * Translates characters to character classes
   */
  private static readonly ushort[] ZZ_CMAP_PACKED = new ushort[] {
    9, 0, 1, 3, 1, 2, 1, 0, 1, 3, 1, 1, 18, 0, 1, 3, 7, 0, 1, 51,
    1, 52, 1, 5, 1, 0, 1, 48, 1, 12, 1, 0, 1, 4, 1, 7, 7, 11, 2, 8,
    1, 49, 1, 47, 1, 57, 1, 50, 1, 58, 2, 0, 1, 28, 3, 10, 1, 31, 1, 10,
    1, 27, 1, 6, 1, 33, 3, 6, 1, 29, 1, 34, 1, 26, 1, 24, 1, 6, 1, 25,
    1, 32, 2, 6, 1, 30, 4, 6, 1, 55, 1, 0, 1, 56, 1, 0, 1, 44, 1, 0,
    1, 17, 1, 45, 1, 35, 1, 38, 1, 20, 1, 39, 1, 16, 1, 41, 1, 22, 2, 6,
    1, 43, 1, 18, 1, 23, 1, 15, 1, 13, 1, 46, 1, 14, 1, 21, 1, 36, 1, 42,
    1, 19, 1, 40, 1, 9, 1, 37, 1, 6, 1, 53, 1, 0, 1, 54, 0xff82, 0, 0 };

  /** 
   * Translates characters to character classes
   */
  private static readonly char[] ZZ_CMAP;

  /** 
   * Translates DFA states to action switch labels.
   */
  private static readonly int [] ZZ_ACTION;

  private static readonly ushort[] ZZ_ACTION_PACKED_0 = new ushort[] {
    1, 0, 1, 1, 2, 2, 1, 1, 1, 3, 1, 4, 2, 5, 1, 1,
    17, 4, 1, 6, 1, 7, 1, 8, 1, 9, 1, 10, 1, 11, 1, 12,
    1, 13, 1, 14, 1, 15, 1, 16, 1, 17, 2, 0, 1, 5, 1, 0,
    24, 4, 2, 18, 1, 0, 1, 5, 8, 4, 1, 19, 20, 4, 1, 20,
    1, 4, 1, 21, 7, 4, 1, 22, 1, 23, 10, 4, 1, 24, 1, 25,
    7, 4, 1, 26, 2, 4, 1, 27, 3, 4, 1, 28, 1, 29, 1, 4,
    1, 30, 1, 4, 1, 31, 4, 4, 1, 32, 1, 4, 1, 33, 1, 34,
    1, 35, 3, 4, 1, 36, 3, 4, 1, 37, 1, 38, 1, 4, 1, 39,
    1, 40, 1, 41, 1, 42, 1, 43, 1, 44, 1, 4, 1, 45, 1, 4,
    1, 46, 1, 4, 1, 47, 0 };

  private static int [] zzUnpackAction() {
    int [] result = new int[175];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(ushort[] packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.Length;
    while (i + 1 < l) {
      int count = packed[i++];
      int value = packed[i++];
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static readonly int [] ZZ_ROWMAP;

  private static readonly ushort[] ZZ_ROWMAP_PACKED_0 = new ushort[] {
    0, 0, 0, 59, 0, 118, 0, 59, 0, 177, 0, 59, 0, 236, 0, 0x0127,
    0, 0x0162, 0, 0x019d, 0, 0x01d8, 0, 0x0213, 0, 0x024e, 0, 0x0289, 0, 0x02c4, 0, 0x02ff,
    0, 0x033a, 0, 0x0375, 0, 0x03b0, 0, 0x03eb, 0, 0x0426, 0, 0x0461, 0, 0x049c, 0, 0x04d7,
    0, 0x0512, 0, 0x054d, 0, 0x0588, 0, 59, 0, 59, 0, 59, 0, 59, 0, 59,
    0, 59, 0, 59, 0, 59, 0, 59, 0, 59, 0, 59, 0, 59, 0, 0x05c3,
    0, 0x05fe, 0, 0x0639, 0, 0x0674, 0, 0x06af, 0, 0x06ea, 0, 0x0725, 0, 0x0760, 0, 0x079b,
    0, 0x07d6, 0, 0x0811, 0, 0x084c, 0, 0x0887, 0, 0x08c2, 0, 0x08fd, 0, 0x0938, 0, 0x0973,
    0, 0x09ae, 0, 0x09e9, 0, 0x0a24, 0, 0x0a5f, 0, 0x0a9a, 0, 0x0ad5, 0, 0x0b10, 0, 0x0b4b,
    0, 0x0b86, 0, 0x0bc1, 0, 0x0bfc, 0, 0x05c3, 0, 59, 0, 0x0c37, 0, 0x0674, 0, 0x0c72,
    0, 0x0cad, 0, 0x0ce8, 0, 0x0d23, 0, 0x0d5e, 0, 0x0d99, 0, 0x0dd4, 0, 0x0e0f, 0, 236,
    0, 0x0e4a, 0, 0x0e85, 0, 0x0ec0, 0, 0x0efb, 0, 0x0f36, 0, 0x0f71, 0, 0x0fac, 0, 0x0fe7,
    0, 0x1022, 0, 0x105d, 0, 0x1098, 0, 0x10d3, 0, 0x110e, 0, 0x1149, 0, 0x1184, 0, 0x11bf,
    0, 0x11fa, 0, 0x1235, 0, 0x1270, 0, 0x12ab, 0, 236, 0, 0x12e6, 0, 236, 0, 0x1321,
    0, 0x135c, 0, 0x1397, 0, 0x13d2, 0, 0x140d, 0, 0x1448, 0, 0x1483, 0, 236, 0, 236,
    0, 0x14be, 0, 0x14f9, 0, 0x1534, 0, 0x156f, 0, 0x15aa, 0, 0x15e5, 0, 0x1620, 0, 0x165b,
    0, 0x1696, 0, 0x16d1, 0, 236, 0, 0x170c, 0, 0x1747, 0, 0x1782, 0, 0x17bd, 0, 0x17f8,
    0, 0x1833, 0, 0x186e, 0, 0x18a9, 0, 236, 0, 0x18e4, 0, 0x191f, 0, 236, 0, 0x195a,
    0, 0x1995, 0, 0x19d0, 0, 236, 0, 236, 0, 0x1a0b, 0, 236, 0, 0x1a46, 0, 236,
    0, 0x1a81, 0, 0x1abc, 0, 0x1af7, 0, 0x1b32, 0, 236, 0, 0x1b6d, 0, 236, 0, 236,
    0, 236, 0, 0x1ba8, 0, 0x1be3, 0, 0x1c1e, 0, 236, 0, 0x1c59, 0, 0x1c94, 0, 0x1ccf,
    0, 236, 0, 236, 0, 0x1d0a, 0, 236, 0, 236, 0, 236, 0, 236, 0, 236,
    0, 236, 0, 0x1d45, 0, 236, 0, 0x1d80, 0, 236, 0, 0x1dbb, 0, 236, 0 };

  private static int [] zzUnpackRowMap() {
    int [] result = new int[175];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(ushort[] packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.Length;
    while (i + 1 < l) {
      int high = packed[i++] << 16;
      result[j++] = high | packed[i++];
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static readonly int [] ZZ_TRANS;

  private static readonly ushort[] ZZ_TRANS_PACKED_0 = new ushort[] {
    1, 2, 1, 3, 2, 4, 1, 5, 1, 6, 1, 7, 1, 8, 1, 9,
    2, 7, 1, 9, 1, 10, 1, 11, 1, 7, 1, 12, 3, 7, 1, 13,
    1, 14, 1, 15, 1, 16, 1, 7, 1, 17, 5, 7, 1, 18, 4, 7,
    1, 19, 1, 20, 1, 7, 1, 21, 1, 22, 1, 7, 1, 23, 1, 24,
    1, 25, 1, 7, 1, 26, 1, 27, 1, 28, 1, 29, 1, 30, 1, 31,
    1, 32, 1, 33, 1, 34, 1, 35, 1, 36, 1, 37, 1, 38, 1, 39,
    61, 0, 1, 4, 60, 0, 1, 40, 1, 41, 59, 0, 6, 7, 1, 0,
    34, 7, 19, 0, 1, 42, 1, 0, 1, 43, 1, 0, 1, 42, 54, 0,
    2, 9, 2, 0, 1, 9, 55, 0, 1, 9, 2, 0, 1, 9, 53, 0,
    6, 7, 1, 0, 1, 7, 1, 44, 32, 7, 18, 0, 6, 7, 1, 0,
    1, 45, 33, 7, 18, 0, 6, 7, 1, 0, 2, 7, 1, 46, 4, 7,
    1, 47, 26, 7, 18, 0, 6, 7, 1, 0, 10, 7, 1, 48, 23, 7,
    18, 0, 6, 7, 1, 0, 23, 7, 1, 49, 3, 7, 1, 50, 1, 51,
    5, 7, 18, 0, 6, 7, 1, 0, 10, 7, 1, 52, 23, 7, 18, 0,
    6, 7, 1, 0, 12, 7, 1, 53, 21, 7, 18, 0, 6, 7, 1, 0,
    18, 7, 1, 54, 15, 7, 18, 0, 6, 7, 1, 0, 2, 7, 1, 55,
    1, 7, 1, 56, 23, 7, 1, 57, 5, 7, 18, 0, 6, 7, 1, 0,
    24, 7, 1, 58, 9, 7, 18, 0, 6, 7, 1, 0, 2, 7, 1, 59,
    4, 7, 1, 60, 26, 7, 18, 0, 6, 7, 1, 0, 30, 7, 1, 61,
    3, 7, 18, 0, 6, 7, 1, 0, 24, 7, 1, 62, 9, 7, 18, 0,
    6, 7, 1, 0, 10, 7, 1, 63, 20, 7, 1, 64, 2, 7, 18, 0,
    6, 7, 1, 0, 2, 7, 1, 65, 31, 7, 18, 0, 6, 7, 1, 0,
    2, 7, 1, 66, 31, 7, 18, 0, 6, 7, 1, 0, 29, 7, 1, 67,
    4, 7, 12, 0, 1, 40, 1, 68, 1, 69, 56, 40, 5, 41, 1, 70,
    53, 41, 7, 0, 1, 42, 3, 0, 1, 42, 54, 0, 2, 71, 1, 0,
    2, 71, 5, 0, 1, 71, 2, 0, 1, 71, 7, 0, 1, 71, 2, 0,
    1, 71, 3, 0, 1, 71, 2, 0, 2, 71, 5, 0, 1, 71, 19, 0,
    6, 7, 1, 0, 2, 7, 1, 72, 31, 7, 18, 0, 6, 7, 1, 0,
    4, 7, 1, 73, 29, 7, 18, 0, 6, 7, 1, 0, 9, 7, 1, 74,
    24, 7, 18, 0, 6, 7, 1, 0, 1, 7, 1, 75, 32, 7, 18, 0,
    6, 7, 1, 0, 29, 7, 1, 76, 4, 7, 18, 0, 6, 7, 1, 0,
    1, 7, 1, 77, 32, 7, 18, 0, 6, 7, 1, 0, 9, 7, 1, 78,
    24, 7, 18, 0, 6, 7, 1, 0, 2, 7, 1, 79, 31, 7, 18, 0,
    6, 7, 1, 0, 23, 7, 1, 80, 10, 7, 18, 0, 6, 7, 1, 0,
    13, 7, 1, 81, 20, 7, 18, 0, 6, 7, 1, 0, 12, 7, 1, 82,
    21, 7, 18, 0, 6, 7, 1, 0, 10, 7, 1, 83, 23, 7, 18, 0,
    6, 7, 1, 0, 8, 7, 1, 84, 25, 7, 18, 0, 6, 7, 1, 0,
    4, 7, 1, 85, 29, 7, 18, 0, 6, 7, 1, 0, 1, 86, 33, 7,
    18, 0, 6, 7, 1, 0, 29, 7, 1, 87, 4, 7, 18, 0, 6, 7,
    1, 0, 26, 7, 1, 88, 7, 7, 18, 0, 6, 7, 1, 0, 2, 7,
    1, 89, 31, 7, 18, 0, 6, 7, 1, 0, 1, 90, 33, 7, 18, 0,
    6, 7, 1, 0, 8, 7, 1, 91, 1, 92, 24, 7, 18, 0, 6, 7,
    1, 0, 8, 7, 1, 93, 1, 94, 20, 7, 1, 95, 3, 7, 18, 0,
    6, 7, 1, 0, 10, 7, 1, 96, 23, 7, 18, 0, 6, 7, 1, 0,
    2, 7, 1, 97, 31, 7, 18, 0, 6, 7, 1, 0, 4, 7, 1, 98,
    29, 7, 12, 0, 4, 41, 1, 69, 1, 70, 53, 41, 6, 0, 6, 7,
    1, 0, 3, 7, 1, 99, 30, 7, 18, 0, 6, 7, 1, 0, 33, 7,
    1, 100, 18, 0, 6, 7, 1, 0, 25, 7, 1, 101, 8, 7, 18, 0,
    6, 7, 1, 0, 8, 7, 1, 102, 25, 7, 18, 0, 6, 7, 1, 0,
    5, 7, 1, 103, 28, 7, 18, 0, 6, 7, 1, 0, 9, 7, 1, 104,
    19, 7, 1, 105, 4, 7, 18, 0, 6, 7, 1, 0, 23, 7, 1, 106,
    10, 7, 18, 0, 6, 7, 1, 0, 1, 7, 1, 107, 32, 7, 18, 0,
    6, 7, 1, 0, 14, 7, 1, 108, 19, 7, 18, 0, 6, 7, 1, 0,
    19, 7, 1, 109, 14, 7, 18, 0, 6, 7, 1, 0, 8, 7, 1, 110,
    25, 7, 18, 0, 6, 7, 1, 0, 7, 7, 1, 111, 26, 7, 18, 0,
    6, 7, 1, 0, 1, 7, 1, 112, 32, 7, 18, 0, 6, 7, 1, 0,
    7, 7, 1, 113, 26, 7, 18, 0, 6, 7, 1, 0, 32, 7, 1, 114,
    1, 7, 18, 0, 6, 7, 1, 0, 4, 7, 1, 115, 29, 7, 18, 0,
    6, 7, 1, 0, 4, 7, 1, 116, 29, 7, 18, 0, 6, 7, 1, 0,
    7, 7, 1, 117, 26, 7, 18, 0, 6, 7, 1, 0, 9, 7, 1, 118,
    24, 7, 18, 0, 6, 7, 1, 0, 2, 7, 1, 119, 31, 7, 18, 0,
    6, 7, 1, 0, 28, 7, 1, 120, 5, 7, 18, 0, 6, 7, 1, 0,
    10, 7, 1, 121, 23, 7, 18, 0, 6, 7, 1, 0, 2, 7, 1, 122,
    31, 7, 18, 0, 6, 7, 1, 0, 3, 7, 1, 123, 30, 7, 18, 0,
    6, 7, 1, 0, 30, 7, 1, 124, 3, 7, 18, 0, 6, 7, 1, 0,
    25, 7, 1, 125, 8, 7, 18, 0, 6, 7, 1, 0, 1, 7, 1, 126,
    32, 7, 18, 0, 6, 7, 1, 0, 29, 7, 1, 127, 4, 7, 18, 0,
    6, 7, 1, 0, 9, 7, 1, 128, 24, 7, 18, 0, 6, 7, 1, 0,
    10, 7, 1, 129, 23, 7, 18, 0, 6, 7, 1, 0, 22, 7, 1, 130,
    11, 7, 18, 0, 6, 7, 1, 0, 22, 7, 1, 131, 11, 7, 18, 0,
    6, 7, 1, 0, 23, 7, 1, 132, 10, 7, 18, 0, 6, 7, 1, 0,
    12, 7, 1, 133, 21, 7, 18, 0, 6, 7, 1, 0, 20, 7, 1, 134,
    13, 7, 18, 0, 6, 7, 1, 0, 23, 7, 1, 135, 10, 7, 18, 0,
    6, 7, 1, 0, 25, 7, 1, 136, 8, 7, 18, 0, 6, 7, 1, 0,
    30, 7, 1, 137, 3, 7, 18, 0, 6, 7, 1, 0, 29, 7, 1, 138,
    4, 7, 18, 0, 6, 7, 1, 0, 23, 7, 1, 139, 10, 7, 18, 0,
    6, 7, 1, 0, 1, 7, 1, 140, 32, 7, 18, 0, 6, 7, 1, 0,
    3, 7, 1, 141, 30, 7, 18, 0, 6, 7, 1, 0, 10, 7, 1, 142,
    23, 7, 18, 0, 6, 7, 1, 0, 2, 7, 1, 143, 31, 7, 18, 0,
    6, 7, 1, 0, 23, 7, 1, 144, 10, 7, 18, 0, 6, 7, 1, 0,
    10, 7, 1, 145, 23, 7, 18, 0, 6, 7, 1, 0, 31, 7, 1, 146,
    2, 7, 18, 0, 6, 7, 1, 0, 1, 7, 1, 147, 32, 7, 18, 0,
    6, 7, 1, 0, 4, 7, 1, 148, 29, 7, 18, 0, 6, 7, 1, 0,
    7, 7, 1, 149, 26, 7, 18, 0, 6, 7, 1, 0, 2, 7, 1, 150,
    31, 7, 18, 0, 6, 7, 1, 0, 3, 7, 1, 151, 30, 7, 18, 0,
    6, 7, 1, 0, 23, 7, 1, 152, 10, 7, 18, 0, 6, 7, 1, 0,
    28, 7, 1, 153, 5, 7, 18, 0, 6, 7, 1, 0, 15, 7, 1, 154,
    18, 7, 18, 0, 6, 7, 1, 0, 13, 7, 1, 155, 20, 7, 18, 0,
    6, 7, 1, 0, 7, 7, 1, 156, 26, 7, 18, 0, 6, 7, 1, 0,
    7, 7, 1, 157, 26, 7, 18, 0, 6, 7, 1, 0, 30, 7, 1, 158,
    3, 7, 18, 0, 6, 7, 1, 0, 10, 7, 1, 159, 23, 7, 18, 0,
    6, 7, 1, 0, 1, 7, 1, 160, 32, 7, 18, 0, 6, 7, 1, 0,
    3, 7, 1, 161, 30, 7, 18, 0, 6, 7, 1, 0, 23, 7, 1, 162,
    10, 7, 18, 0, 6, 7, 1, 0, 29, 7, 1, 163, 4, 7, 18, 0,
    6, 7, 1, 0, 5, 7, 1, 164, 28, 7, 18, 0, 6, 7, 1, 0,
    10, 7, 1, 165, 23, 7, 18, 0, 6, 7, 1, 0, 16, 7, 1, 166,
    17, 7, 18, 0, 6, 7, 1, 0, 21, 7, 1, 167, 12, 7, 18, 0,
    6, 7, 1, 0, 26, 7, 1, 168, 7, 7, 18, 0, 6, 7, 1, 0,
    23, 7, 1, 169, 10, 7, 18, 0, 6, 7, 1, 0, 7, 7, 1, 170,
    26, 7, 18, 0, 6, 7, 1, 0, 23, 7, 1, 171, 10, 7, 18, 0,
    6, 7, 1, 0, 1, 172, 33, 7, 18, 0, 6, 7, 1, 0, 25, 7,
    1, 173, 8, 7, 18, 0, 6, 7, 1, 0, 30, 7, 1, 174, 3, 7,
    18, 0, 6, 7, 1, 0, 7, 7, 1, 175, 26, 7, 12, 0, 0 };

  private static int [] zzUnpackTrans() {
    int [] result = new int[7670];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(ushort[] packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.Length;
    while (i + 1 < l) {
      int count = packed[i++];
      int value = packed[i++];
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private const int ZZ_UNKNOWN_ERROR = 0;
  private const int ZZ_NO_MATCH = 1;
  private const int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static readonly string[] ZZ_ERROR_MSG = new string[] {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static readonly int [] ZZ_ATTRIBUTE;

  private static readonly ushort[] ZZ_ATTRIBUTE_PACKED_0 = new ushort[] {
    1, 0, 1, 9, 1, 1, 1, 9, 1, 1, 1, 9, 21, 1, 12, 9,
    2, 0, 1, 1, 1, 0, 25, 1, 1, 9, 1, 0, 105, 1, 0 };

  private static int [] zzUnpackAttribute() {
    int [] result = new int[175];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(ushort[] packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.Length;
    while (i + 1 < l) {
      int count = packed[i++];
      int value = packed[i++];
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private System.IO.TextReader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char[] zzBuffer = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

/** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private bool zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private bool zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private bool zzEOFDone;

  /* user code: */
  StringBuilder strng = new StringBuilder();

  private Symbol symbol(int type) {
    return new Symbol(type, yyline+1, yycolumn+1);
  }

  private Symbol symbol(int type, object value) {
    return new Symbol(type, yyline+1, yycolumn+1, value);
  }

  /* assumes correct representation of a long value for
     specified radix in String s */
  private long parseLong(string s, int radix) {
      return Convert.ToInt64(s, radix);
  }


  /**
   * Creates a new scanner
   * There is also a System.IO.Stream version of this constructor.
   *
   * @param   in  the System.IO.TextReader to read input from.
   */
  internal JrpcgenScanner(TextReader @in) {
    this.zzReader = @in;
  }

  /**
   * Creates a new scanner.
   * There is also TextReader version of this constructor.
   *
   * @param   in  the System.IO.Stream to read input from.
   */
  internal JrpcgenScanner(Stream @in) : this(new StreamReader(@in))
  {
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(ushort[] packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 158) {
      int  count = packed[i++];
      char value = (char)packed[i++];
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   IOException  if any I/O-Error occurs
   */
  private bool zzRefill() {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      Array.Copy(zzBuffer, zzStartRead,
                 zzBuffer, 0,
                 zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzPushbackPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.Length) {
      /* if not: blow it up */
      char[] newBuffer = new char[zzCurrentPos*2];
      Array.Copy(zzBuffer, 0, newBuffer, 0, zzBuffer.Length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.Read(zzBuffer, zzEndRead,
                                            zzBuffer.Length-zzEndRead);

    if (numRead <= 0) {
      return true;
    }
    else {
      zzEndRead+= numRead;
      return false;
    }
  }

    
  /**
   * Closes the input stream.
   */
  public void yyclose() {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.Close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public void yyreset(System.IO.TextReader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = zzPushbackPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public string yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex/CSFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (IndexOutOfRangeException) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Exception(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
        yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   System.IO.IOException  if any I/O-Error occurs
   */
  public Symbol next_token() {
    int zzInput = 0;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      bool zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
          break;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        bool zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          bool eof = zzRefill();
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = zzLexicalState;


        while (true) {
          goto zzForAction_skip;
        zzForAction: break;
        zzForAction_skip:
          if (!ZZ_SPURIOUS_WARNINGS_SUCK) goto zzForAction;
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            goto zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            bool eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
            goto zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) goto zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) goto zzForAction;
          }

        }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 2: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 165 "JrpcgenScanner.flex"
                          /* ignore */ 
#line default
          }
          break;
        case 7: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 141 "JrpcgenScanner.flex"
                          return symbol(JrpcgenSymbols.COMMA); 
#line default
          }
          break;
        case 3: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 144 "JrpcgenScanner.flex"
                          return symbol(JrpcgenSymbols.STAR); 
#line default
          }
          break;
        case 34: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 133 "JrpcgenScanner.flex"
                          return symbol(JrpcgenSymbols.STRUCT); 
#line default
          }
          break;
        case 14: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 149 "JrpcgenScanner.flex"
                          return symbol(JrpcgenSymbols.LBRACKET); 
#line default
          }
          break;
        case 12: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 147 "JrpcgenScanner.flex"
                          return symbol(JrpcgenSymbols.LBRACE); 
#line default
          }
          break;
        case 10: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 145 "JrpcgenScanner.flex"
                          return symbol(JrpcgenSymbols.LPAREN); 
#line default
          }
          break;
        case 27: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 108 "JrpcgenScanner.flex"
                          return symbol(JrpcgenSymbols.CONST); 
#line default
          }
          break;
        case 43: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 109 "JrpcgenScanner.flex"
                          return symbol(JrpcgenSymbols.TYPEDEF); 
#line default
          }
          break;
        case 35: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 111 "JrpcgenScanner.flex"
                          return symbol(JrpcgenSymbols.SWITCH); 
#line default
          }
          break;
        case 42: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 106 "JrpcgenScanner.flex"
                          return symbol(JrpcgenSymbols.VERSION); 
#line default
          }
          break;
        case 47: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 127 "JrpcgenScanner.flex"
                          return symbol(JrpcgenSymbols.QUADRUPLE); 
#line default
          }
          break;
        case 44: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 113 "JrpcgenScanner.flex"
                          return symbol(JrpcgenSymbols.DEFAULT); 
#line default
          }
          break;
        case 16: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 151 "JrpcgenScanner.flex"
                          return symbol(JrpcgenSymbols.LANGLE); 
#line default
          }
          break;
        case 18: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 166 "JrpcgenScanner.flex"
                          /* ignore */ 
#line default
          }
          break;
        case 32: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 131 "JrpcgenScanner.flex"
                          return symbol(JrpcgenSymbols.OPAQUE); 
#line default
          }
          break;
        case 8: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 142 "JrpcgenScanner.flex"
                          return symbol(JrpcgenSymbols.COLON); 
#line default
          }
          break;
        case 19: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 120 "JrpcgenScanner.flex"
                          return symbol(JrpcgenSymbols.INT); 
#line default
          }
          break;
        case 40: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 104 "JrpcgenScanner.flex"
                          return symbol(JrpcgenSymbols.VERSION); 
#line default
          }
          break;
        case 45: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 119 "JrpcgenScanner.flex"
                          return symbol(JrpcgenSymbols.SHORT); 
#line default
          }
          break;
        case 23: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 117 "JrpcgenScanner.flex"
                          return symbol(JrpcgenSymbols.CHAR); 
#line default
          }
          break;
        case 37: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 123 "JrpcgenScanner.flex"
                          return symbol(JrpcgenSymbols.LONG); 
#line default
          }
          break;
        case 41: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 105 "JrpcgenScanner.flex"
                          return symbol(JrpcgenSymbols.PROGRAM); 
#line default
          }
          break;
        case 38: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 129 "JrpcgenScanner.flex"
                          return symbol(JrpcgenSymbols.BOOL); 
#line default
          }
          break;
        case 30: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 134 "JrpcgenScanner.flex"
                          return symbol(JrpcgenSymbols.UNION); 
#line default
          }
          break;
        case 15: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 150 "JrpcgenScanner.flex"
                          return symbol(JrpcgenSymbols.RBRACKET); 
#line default
          }
          break;
        case 5: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 155 "JrpcgenScanner.flex"
                       
        return symbol(JrpcgenSymbols.INTEGER_LITERAL, yytext());
    
#line default
          }
          break;
        case 21: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 130 "JrpcgenScanner.flex"
                          return symbol(JrpcgenSymbols.ENUM); 
#line default
          }
          break;
        case 20: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 116 "JrpcgenScanner.flex"
                          return symbol(JrpcgenSymbols.VOID); 
#line default
          }
          break;
        case 31: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 121 "JrpcgenScanner.flex"
                          return symbol(JrpcgenSymbols.INT); 
#line default
          }
          break;
        case 22: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 112 "JrpcgenScanner.flex"
                          return symbol(JrpcgenSymbols.CASE); 
#line default
          }
          break;
        case 36: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 126 "JrpcgenScanner.flex"
                          return symbol(JrpcgenSymbols.DOUBLE); 
#line default
          }
          break;
        case 9: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 143 "JrpcgenScanner.flex"
                          return symbol(JrpcgenSymbols.EQUAL); 
#line default
          }
          break;
        case 1: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 170 "JrpcgenScanner.flex"
                          throw new Exception("Illegal character \"" + yytext() + "\""); 
#line default
          }
          break;
        case 39: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 103 "JrpcgenScanner.flex"
                          return symbol(JrpcgenSymbols.PROGRAM); 
#line default
          }
          break;
        case 13: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 148 "JrpcgenScanner.flex"
                          return symbol(JrpcgenSymbols.RBRACE); 
#line default
          }
          break;
        case 29: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 124 "JrpcgenScanner.flex"
                          return symbol(JrpcgenSymbols.HYPER); 
#line default
          }
          break;
        case 24: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 122 "JrpcgenScanner.flex"
                          return symbol(JrpcgenSymbols.LONG); 
#line default
          }
          break;
        case 4: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 160 "JrpcgenScanner.flex"
                  
        return symbol(JrpcgenSymbols.IDENTIFIER, yytext());
    
#line default
          }
          break;
        case 46: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 137 "JrpcgenScanner.flex"
                          return symbol(JrpcgenSymbols.UNSIGNED); 
#line default
          }
          break;
        case 6: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 140 "JrpcgenScanner.flex"
                          return symbol(JrpcgenSymbols.SEMICOLON); 
#line default
          }
          break;
        case 17: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 152 "JrpcgenScanner.flex"
                          return symbol(JrpcgenSymbols.RANGLE); 
#line default
          }
          break;
        case 26: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 118 "JrpcgenScanner.flex"
                          return symbol(JrpcgenSymbols.SHORT); 
#line default
          }
          break;
        case 11: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 146 "JrpcgenScanner.flex"
                          return symbol(JrpcgenSymbols.RPAREN); 
#line default
          }
          break;
        case 33: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 132 "JrpcgenScanner.flex"
                          return symbol(JrpcgenSymbols.STRING); 
#line default
          }
          break;
        case 28: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 125 "JrpcgenScanner.flex"
                          return symbol(JrpcgenSymbols.FLOAT); 
#line default
          }
          break;
        case 25: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 128 "JrpcgenScanner.flex"
                          return symbol(JrpcgenSymbols.BOOL); 
#line default
          }
          break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              if (ZZ_SPURIOUS_WARNINGS_SUCK)
              {     return new Symbol(JrpcgenSymbols.EOF);
 }
              break;
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
          break;
      }
    }
  }


}
#line 173 "JrpcgenScanner.flex"

}

/* End of file JrpcgenScanner.flex */


#line default
