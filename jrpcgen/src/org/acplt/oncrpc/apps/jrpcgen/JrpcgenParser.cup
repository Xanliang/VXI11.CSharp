/*
 * $Header: /cvsroot/remotetea/remotetea/src/org/acplt/oncrpc/apps/jrpcgen/JrpcgenParser.cup,v 1.2 2005/11/11 21:29:44 haraldalbrecht Exp $
 *
 * Copyright (c) 1999, 2000
 * Lehrstuhl fuer Prozessleittechnik (PLT), RWTH Aachen
 * D-52064 Aachen, Germany.
 * All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Library General Public License as
 * published by the Free Software Foundation; either version 2 of the
 * License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Library General Public License for more details.
 *
 * You should have received a copy of the GNU Library General Public
 * License along with this program (see the file COPYING.LIB for more
 * details); if not, write to the Free Software Foundation, Inc.,
 * 675 Mass Ave, Cambridge, MA 02139, USA.
 */

/*
 * To compile into c# code use:
 *   c#cup -namespace org.acplt.oncrpc.apps.jrpcgen
 *         -parser JrpcgenParser \
 *         -symbols JrpcgenSymbols < JrpcgenParser.cup
 */
 
using TUVienna.CS_CUP.Runtime;
using System.Collections;
using System.Text;
using System;

//
// We need to set up some code within the parser class...
//
parser code  {:

    public new void report_error(string message, object info) {
        StringBuilder msg = new StringBuilder("jrpcgen: error");
        if (info is Symbol) {
            Symbol s = (Symbol) info;
            msg.Append(" in line ");
            msg.Append(s.left);
        }
        msg.Append(": ");
        msg.Append(message);
        Console.Out.WriteLine(msg);
        throw(new JrpcgenParserException());
    }

    public void report_error(string message, int line) {
        StringBuilder msg = new StringBuilder("jrpcgen: error in line ");
        msg.Append(line);
        msg.Append(": ");
        msg.Append(message);
        Console.Out.WriteLine(msg);
        throw(new JrpcgenParserException());
    }

    public new void syntax_error(Symbol cur_token) {
        StringBuilder msg = new StringBuilder("jrpcgen: syntax error in line ");
        msg.Append(cur_token.left);
        Console.Out.WriteLine(msg);
        throw(new JrpcgenParserException());
    }

    public new void report_fatal_error(string message, object info) {
        report_error(message, info);
        throw(new JrpcgenParserException("Fatal Syntax Error"));
    }

:};

//
// As per convention, we use all uppercase letters for TERMINALs.
// Notes:
//   - we do not define the terminals U_SHORT etc. but instead map these
//     terminals in the scanner to the corresponding signed base data type.
//
terminal SEMICOLON;                     // ";"
terminal COMMA;                         // ","
terminal COLON;                         // ":"
terminal EQUAL;                         // "="
terminal STAR;                          // "*"
terminal LPAREN, RPAREN;                // "(" ")"
terminal LBRACE, RBRACE;                // "{" "}"
terminal LBRACKET, RBRACKET;            // "[" "]"
terminal LANGLE, RANGLE;                // "<" ">"

terminal PROGRAM;                       // "PROGRAM" "program"
terminal VERSION;                       // "VERSION" "version"
terminal CONST;                         // "const"
terminal TYPEDEF;                       // "typedef"
terminal SWITCH;                        // "switch"
terminal CASE;                          // "case"
terminal DEFAULT;                       // "default"

terminal VOID;                          // "void"
terminal CHAR;                          // "char"
terminal SHORT;                         // "short"
terminal INT;                           // "int"
terminal LONG;                          // "long"
terminal HYPER;                         // "hyper"
terminal FLOAT;                         // "float"
terminal DOUBLE;                        // "double"
terminal QUADRUPLE;                     // "quadruple"
terminal BOOL;                          // "bool"
terminal ENUM;                          // "enum"
terminal OPAQUE;                        // "opaque"
terminal STRING;                        // "string"
terminal STRUCT;                        // "struct"
terminal UNION;                         // "union"
terminal UNSIGNED;                      // "unsigned"

terminal string INTEGER_LITERAL; // yes, that's right.
terminal string IDENTIFIER;


non terminal compilation_unit;
non terminal definitions_opt, definitions, definition;

non terminal                      constant_def;

non terminal                      enum_def;
non terminal ArrayList               enum_elements;
non terminal JrpcgenConst         enum_element;

non terminal                      struct_def;

non terminal                      union_def;
non terminal ArrayList               union_cases;
non terminal JrpcgenUnionArm      union_case;

non terminal                      typedef_def;

non terminal ArrayList               program_defs;
non terminal                      program_defs_opt;
non terminal JrpcgenProgramInfo   program_def;
non terminal ArrayList               version_defs;
non terminal JrpcgenVersionInfo   version_def;
non terminal ArrayList               procedure_defs;
non terminal JrpcgenProcedureInfo procedure_def;

non terminal ArrayList               argument_list;
non terminal ArrayList               argument_list_no_void;

non terminal string               type_specifier_incl_specials;
non terminal string               type_specifier_incl_string;
non terminal string               type_specifier;

non terminal ArrayList               declarations;
non terminal JrpcgenDeclaration   declaration;

non terminal string               int_types;
non terminal string               value;


start with compilation_unit;

//
// A ".x" file consists of zero or more definitions (typedef, struct, union,
// enum, const) followed by exactly one program definition.
//
// After the compilation unit has been parsed, the jrpcgen class will contain
// all necessary information in its static variable members to generate the
// various source code files.
//
// ** SF patch #1159721: add possibility to generate from .x file without program def **
compilation_unit ::=
        definitions_opt program_defs_opt
        ;

program_defs_opt ::=
		/* empty */
			{:
				jrpcgen.programInfos = new ArrayList();
			:}
		|
		program_defs:progDefs
            {:
                jrpcgen.programInfos = progDefs;
            :}
		;

program_defs ::=
        program_def:progDef
            {:
                RESULT = new ArrayList();
                RESULT.Add(progDef);
            :}
        |
        program_defs:progDefs program_def:progDef
            {:
                progDefs.Add(progDef);
                RESULT = progDefs;
            :}
        ;

definitions_opt ::=
        /* empty */
        |
        definitions
        ;

definitions ::=
        definition
        |
        definitions definition
        ;

//
// A single definition can be either a typedef, struct, union, enum or const
// definition.
//
definition ::=
        constant_def | enum_def | struct_def | union_def | typedef_def
        ;

//
// A constant definition assigns either an integer literal or an identifier
// to a (constant) identifier:
//   - add constant identifier to global identifier list and remember the
//     "value" of the constant (either an integer literal or another
//     identifier).
//
constant_def ::=
        CONST IDENTIFIER:id EQUAL value:value SEMICOLON
            {:
               JrpcgenConst type = new JrpcgenConst(id, value, jrpcgen.baseClassname);
               if ( jrpcgen.globalIdentifiers.ContainsKey(id)) {
                   parser.report_error("const identifier \"" + id + "\" already defined", idleft);
               }
               jrpcgen.globalIdentifiers.Add(id, type);
               if ( jrpcgen.debug ) {
                   Console.Out.Write("CONST ");
                   type.dump();
                   Console.Out.WriteLine();
               }
            :}
        ;

//
// Parse an enumeration:
//   - add enumeration identifier to global identifier list and remember
//     which enumerated elements belong to the enumeration.
//   - add the individual enumerated elements to the global identifier list.
//
enum_def ::=
        ENUM IDENTIFIER:id LBRACE
            enum_elements:elements
        RBRACE SEMICOLON
            {:
               //
               // Fix up enclosure of enumeration elements, so we can later
               // use a full qualified identifier.
               //
               int size = elements.Count;
               for ( int idx = 0; idx < size; ++idx ) {
                   JrpcgenConst c = (JrpcgenConst) elements[idx];
                   c.enclosure = id;
               }
               JrpcgenEnum type = new JrpcgenEnum(id, elements);
               if ( jrpcgen.globalIdentifiers.ContainsKey(id)) {
                   parser.report_error("enum identifier \"" + id + "\" already defined", idleft);
               }
               jrpcgen.globalIdentifiers.Add(id, type);
               if ( jrpcgen.debug ) {
                   type.dump();
               }
            :}
        ;

enum_elements ::=
        enum_element:el
            {:
               //
               // If no specific value has been assigned to this element of
               // an enumeration, assign zero by default.
               //
               if ( el.value == null ) {
                   el.value = "0";
               }
               RESULT = new ArrayList();
               RESULT.Add(el);
            :}
        |
        enum_elements:elements COMMA enum_element:el
            {:
               //
               // If no specific value has been assigned to this element of
               // an enumeration, increment value of previous element and
               // assign the new value to this element. BTW -- we let the
               // Java compiler do the calculation, so references to
               // other constants by name are valid.
               //
               if ( el.value == null ) {
                   el.value = ((JrpcgenConst)elements[elements.Count - 1]).value
                              + "+1";
               }
               elements.Add(el);
               RESULT = elements;
            :}
        ;

enum_element ::=
        IDENTIFIER:id
            {:
               //
               // We don't know yet the value, so we don't specify one. The
               // value will be fixed up when the production for the complete
               // enumeration triggers.
               //
               RESULT = new JrpcgenConst(id, null);
               if ( jrpcgen.globalIdentifiers.ContainsKey(id)) {
                   parser.report_error("identifier \"" + id + "\" already defined", idleft);
               }
               jrpcgen.globalIdentifiers.Add(id, RESULT);
            :}
        |
        IDENTIFIER:id EQUAL value:val
            {:
               RESULT = new JrpcgenConst(id, val);
               if ( jrpcgen.globalIdentifiers.ContainsKey(id)) {
                   parser.report_error("identifier \"" + id + "\" already defined", idleft);
               }
               jrpcgen.globalIdentifiers.Add(id, RESULT);
            :}
        ;

//
// Parse a structure:
//   - add structure identifier to global list of identifiers.
//
struct_def ::=
        STRUCT IDENTIFIER:id LBRACE
            declarations:elements
        RBRACE SEMICOLON
            {:
               JrpcgenStruct strct = new JrpcgenStruct(id, elements);
               if ( jrpcgen.globalIdentifiers.ContainsKey(id)) {
                   parser.report_error("struct identifier \"" + id + "\" already defined", idleft);
               }
               jrpcgen.globalIdentifiers.Add(id, strct);
               if ( jrpcgen.debug ) {
                   strct.dump();
               }
            :}
        ;

//
// Parse a union:
//   - add union identifier to global list of identifiers.
// Note that this grammar is more liberal with respect to the "default"
// arm: it can appear anywhere within the union and need not to be the
// last arm. This makes the grammar more straight then Sun's rpcgen.
//
union_def ::=
        UNION IDENTIFIER:id SWITCH LPAREN declaration:descrim RPAREN LBRACE
            union_cases:elements
        RBRACE SEMICOLON
            {:
               JrpcgenUnion uni = new JrpcgenUnion(id, descrim, elements);
               if ( jrpcgen.globalIdentifiers.ContainsKey(id)) {
                   parser.report_error("union identifier \"" + id + "\" already defined", idleft);
               }
               jrpcgen.globalIdentifiers.Add(id, uni);
               if ( jrpcgen.debug ) {
                   uni.dump();
               }
            :}
        ;

union_cases ::=
        union_case:arm
            {:
                RESULT = new ArrayList();
                RESULT.Add(arm);
            :}
        |
        union_cases:arms union_case:arm
            {:
                arms.Add(arm);
                RESULT = arms;
            :}
        ;

union_case ::=
        CASE value:val COLON
            {:
               RESULT = new JrpcgenUnionArm(val, null);
            :}
        |
        CASE value:val COLON declaration:element SEMICOLON
            {:
               RESULT = new JrpcgenUnionArm(val, element);
            :}
        |
        DEFAULT COLON declaration:element SEMICOLON
            {:
               RESULT = new JrpcgenUnionArm(null, element);
            :}
        ;

//
// New type definition.
//
typedef_def ::=
        TYPEDEF declaration:decl SEMICOLON
            {:
               if ( jrpcgen.globalIdentifiers.ContainsKey(decl.identifier)) {
                   parser.report_error("typedef identifier \"" + decl.identifier + "\" already defined", declleft);
               }
               jrpcgen.globalIdentifiers.Add(decl.identifier, decl);
               if ( jrpcgen.debug ) {
                   Console.Out.Write("TYPEDEF ");
                   decl.dump();
               }
            :}
        ;


//
// Parse a program definition:
//   - add program identifier to global list of identifiers.
//   - remember the individual versions of this program.
//
program_def ::=
        PROGRAM IDENTIFIER:progId LBRACE
            version_defs:versions
        RBRACE EQUAL value:progNumber SEMICOLON
            {:
               JrpcgenConst prog = new JrpcgenConst(progId, progNumber, jrpcgen.baseClassname);
               RESULT = new JrpcgenProgramInfo(progId, progNumber, versions);
               if ( jrpcgen.globalIdentifiers.ContainsKey(progId)) {
                   parser.report_error("program identifier \"" + progId + "\" already defined", progIdleft);
               }
               jrpcgen.globalIdentifiers.Add(progId, prog);
               if ( jrpcgen.debug ) {
                   Console.Out.WriteLine("PROGRAM " + progId + " = " + progNumber);
               }
            :}
        ;

//
// Parse a version definition:
//   - add version identifier to global list of identifiers.
//   - remember the procedures defined for this program version.
//
version_defs ::=
        version_def:version
            {:
                RESULT = new ArrayList();
                RESULT.Add(version);
            :}
        |
        version_defs:versions version_def:version
            {:
                versions.Add(version);
                RESULT = versions;
            :}
        ;

version_def ::=
        VERSION IDENTIFIER:versId LBRACE
            procedure_defs:procs
        RBRACE EQUAL value:versNumber SEMICOLON
            {:
               JrpcgenConst vers = new JrpcgenConst(versId, versNumber, jrpcgen.baseClassname);
               RESULT = new JrpcgenVersionInfo(versId, versNumber, procs);
               if ( jrpcgen.globalIdentifiers.ContainsKey(versId)) {
                   parser.report_error("version identifier \"" + versId + "\" already defined", versIdleft);
               }
               jrpcgen.globalIdentifiers.Add(versId, vers);
               versNumber = vers.resolveValue();
               if ( versNumber == null ) {
                   parser.report_error("Can not resolve version identifier \"" +
                                      versId + "\" to integer literal", versNumberleft);
               }
               //
               // We also need to fix up the procedure identifiers by appending
               // the version number.
               //
               int size = procs.Count;
               for ( int idx = 0; idx < size; ++idx ) {
                   JrpcgenProcedureInfo procInfo = (JrpcgenProcedureInfo)
                       procs[idx];
                   procInfo.procedureId += "_" + versNumber;
                   JrpcgenConst proc = new JrpcgenConst(procInfo.procedureId,
                                                        procInfo.procedureNumber,
                                                        jrpcgen.baseClassname);
                   if ( jrpcgen.globalIdentifiers.ContainsKey(procInfo.procedureId)) {
                       // FIXME line number
                       parser.report_error("procedure identifier \"" + procInfo.procedureId + "\" already defined", 0);
                   }
                   jrpcgen.globalIdentifiers.Add(procInfo.procedureId, proc);
               }

               if ( jrpcgen.debug ) {
                   Console.Out.WriteLine("VERSION " + versId + " = " + versNumber);
                   for ( int idx = 0; idx < size; ++idx ) {
                       JrpcgenProcedureInfo procInfo = (JrpcgenProcedureInfo)
                           procs[idx];
                       Console.Out.Write("PROCEDURE " + procInfo.resultType + " "
                                          + procInfo.procedureId + "(");
                       if ( procInfo.parameters == null ) {
                           Console.Out.Write("void");
                       } else {
                           for ( int pidx = 0; pidx < procInfo.parameters.Count; ++pidx ) {
                               JrpcgenParamInfo paramInfo = (JrpcgenParamInfo)
                                   procInfo.parameters[pidx];
                               if ( pidx > 0 ) {
                                   Console.Out.Write(",");
                               }
                               Console.Out.Write(paramInfo.parameterType);
                               if ( paramInfo.parameterName != null ) {
                                   Console.Out.Write(" " + paramInfo.parameterName);
                               }
                           }
                       }
                       Console.Out.WriteLine(") = "
                                          + procInfo.procedureNumber);
                   }
               }
            :}
        ;

procedure_defs ::=
        procedure_def:proc
            {:
                RESULT = new ArrayList();
                RESULT.Add(proc);
            :}
        |
        procedure_defs:procs procedure_def:proc
            {:
                procs.Add(proc);
                RESULT = procs;
            :}
        ;

//
// A procedure definition consists of the return type, the procedure identifier,
// one parameter type and the procedure number to assign. Nothing more.
//
// Please note that RFC 1832 is fishy: it talks about multiple parameters
// separated by commas, but at least rpcgen for ONC/RPC protocol version 2
// does only support a single parameter. Also, it forgets about "void"
// being valid and opaque being invalid -- see Sun's rpcgen source. Sigh.
//
// Due to "popular request" (SPQR, anyone?!) the grammar has been updated
// to cope with multiple parameters.
//
procedure_def ::=
        type_specifier_incl_specials:resultType IDENTIFIER:procId LPAREN
            argument_list:args
        RPAREN EQUAL value:procNumber SEMICOLON
            {:
               RESULT = new JrpcgenProcedureInfo(procId, procNumber, resultType, args);
               //
               // NOTE: we can not add the identifier for the procedure number
               // to the list of global identifiers yet, as we do not know the
               // version number. This has to be fixed after the embracing
               // version definition was parsed in toto.
               //
            :}
        ;

//
// We either accept only one "void" argument, indicating that there are
// no arguments to a particular remote procedure at all, or a list of
// arguments, either named or unnamed.
//
argument_list ::=
        VOID
            {:
               RESULT = null; // special case, allows fast tests
            :}
        |
        argument_list_no_void:args
            {:
               RESULT = args; // just pass through
               int size = RESULT.Count;
               //
               // All arguments, which are unnamed so far will now get
               // default names.
               //
               for ( int idx = 0; idx < size; ++idx ) {
                   JrpcgenParamInfo paraminfo =
                       (JrpcgenParamInfo) RESULT[idx];
                   if ( paraminfo.parameterName == null ) {
                       paraminfo.parameterName = "arg" + (idx + 1);
                   }
               }
            :}
        ;
//
// Accept a list of arguments, either named or unnamed.
//
argument_list_no_void ::=
        type_specifier_incl_string:paramType
            {:
               RESULT = new ArrayList();
               RESULT.Add(new JrpcgenParamInfo(paramType, null));
            :}
        |
        type_specifier_incl_string:paramType IDENTIFIER:paramName
            {:
               RESULT = new ArrayList();
               RESULT.Add(new JrpcgenParamInfo(paramType, paramName));
            :}
        |
        argument_list:args COMMA type_specifier_incl_string:paramType
            {:
               RESULT = args;
               RESULT.Add(new JrpcgenParamInfo(paramType, null));
            :}
        |
        argument_list:args COMMA type_specifier_incl_string:paramType
          IDENTIFIER:paramName
            {:
               RESULT = args;
               RESULT.Add(new JrpcgenParamInfo(paramType, paramName));
            :}
        ;

type_specifier_incl_specials ::=
        VOID
            {: RESULT = "void"; :}
        |
        type_specifier_incl_string:type
            {: RESULT = type; :}
        ;

type_specifier_incl_string ::=
        STRING
            {: RESULT = "string"; :}
        |
        type_specifier:type
            {: RESULT = type; :}
        ;

//
// A type specifier can be either a base type ("builtin" type), an
// enumeration type, structure, union or typedef'd type. The "string"
// type specifier is insane, as it does not accept size specification.
// Somehow the whole x-file grammar is brain-damaged: it was never
// carefully designed but instead grew like the pest.
//
type_specifier ::=
        IDENTIFIER:id
            {: RESULT = id; :}
        |
        BOOL
            {: RESULT = "bool"; :}
        |
        // As the Java language and the [Jk...]VM can only handle signed
        // integers of various sizes, we ignore the UNSIGNED token completely.
        UNSIGNED int_types:type
            {: RESULT = type; :}
        |
        int_types:type
            {: RESULT = type; :}
        |
        // Per default unsigned without any following type maps to "int"
        UNSIGNED
            {: RESULT = "int"; :}
        |
        FLOAT
            {: RESULT = "float"; :}
        |
        DOUBLE
            {: RESULT = "double"; :}
        |
        QUADRUPLE // FIXME!
            {: RESULT = "double"; :}
        |
        ENUM IDENTIFIER:id
            {: RESULT = id; :}
        |
        STRUCT IDENTIFIER:id
            {: RESULT = id; :}
        |
        UNION IDENTIFIER:id
            {: RESULT = id; :}
        ;

//
//
//
declarations ::=
        declaration:decl SEMICOLON
            {:
               RESULT = new ArrayList();
               RESULT.Add(decl);
            :}
        |
        declarations:decls declaration:decl SEMICOLON
            {:
               decls.Add(decl);
               RESULT = decls;
            :}
        ;

declaration ::=
        OPAQUE IDENTIFIER:id LBRACKET value:size RBRACKET
            {:
                // Note: we use the pseudo-type "opaque" here to distinguish
                // real byte arrays from fake byte (char) arrays.
                RESULT = new JrpcgenDeclaration(
                    id, "opaque", JrpcgenDeclaration.FIXEDVECTOR, size);
            :}
        |
        OPAQUE IDENTIFIER:id LANGLE value:size RANGLE
            {:
                // Note: we use the pseudo-type "opaque" here to distinguish
                // real byte arrays from fake byte (char) arrays.
                RESULT = new JrpcgenDeclaration(
                    id, "opaque", JrpcgenDeclaration.DYNAMICVECTOR, size);
            :}
        |
        OPAQUE IDENTIFIER:id LANGLE RANGLE
            {:
                // Note: we use the pseudo-type "opaque" here to distinguish
                // real byte arrays from fake byte (char) arrays.
                RESULT = new JrpcgenDeclaration(
                    id, "opaque", JrpcgenDeclaration.DYNAMICVECTOR, null);
            :}
        |
        STRING IDENTIFIER:id LANGLE value:size RANGLE
            {:
                RESULT = new JrpcgenDeclaration(
                    id, "string", JrpcgenDeclaration.DYNAMICVECTOR, size);
            :}
        |
        STRING IDENTIFIER:id LANGLE RANGLE
            {:
                RESULT = new JrpcgenDeclaration(
                    id, "string", JrpcgenDeclaration.DYNAMICVECTOR, null);
            :}
        |
        type_specifier:type IDENTIFIER:id
            {:
               RESULT = new JrpcgenDeclaration(id, type);
            :}
        |
        type_specifier:type IDENTIFIER:id LBRACKET value:size RBRACKET
            {:
               RESULT = new JrpcgenDeclaration(
                   id, type, JrpcgenDeclaration.FIXEDVECTOR, size);
            :}
        |
        type_specifier:type IDENTIFIER:id LANGLE value:size RANGLE
            {:
                RESULT = new JrpcgenDeclaration(
                    id, type, JrpcgenDeclaration.DYNAMICVECTOR, size);
            :}
        |
        type_specifier:type IDENTIFIER:id LANGLE RANGLE
            {:
                RESULT = new JrpcgenDeclaration(
                    id, type, JrpcgenDeclaration.DYNAMICVECTOR, null);
            :}
        |
        type_specifier:type STAR IDENTIFIER:id
            {:
                RESULT = new JrpcgenDeclaration(
                    id, type, JrpcgenDeclaration.INDIRECTION, null);
            :}
        |
        VOID
            {:
                RESULT = new JrpcgenDeclaration(null, "void");
            :}
        ;

//
// There are quite some integer types defined in RFC 1832, with additional
// types used by Sun's rpcgen.
//
int_types ::=
        SHORT INT
            {: RESULT = "short"; :}
        |
        SHORT
            {: RESULT = "short"; :}
        |
        //
        // Note that we try to retain compatibility to most C compilers by
        // mapping a "C char" to a "Java byte".
        //
        CHAR
            {: RESULT = "byte"; :}
        |
        INT
            {: RESULT = "int"; :}
        |
        LONG INT
            {: RESULT = "int"; :}
        |
        LONG
            {: RESULT = "int"; :}
        |
        HYPER
            {: RESULT = "long"; :}
        |
        HYPER INT
            {: RESULT = "long"; :}
        ;

//
// "Values" can be either integer literals or identifiers, which then can
// be (hopefully) resolved to an integer literal.
//
value ::=
        INTEGER_LITERAL:lit
            {: RESULT = lit; :}
        |
        IDENTIFIER:id
            {: RESULT = id; :}
        ;

/* End of file JrpcgenParser.cup */
