/*
 * Automatically generated by jrpcgen 1.0.7 on 2021/9/14
 * jrpcgen is part of the "Remote Tea.Net" ONC/RPC package for C#
 * See http://remotetea.sourceforge.net for details
 */
namespace tests.org.acplt.oncrpc.jrpcgen{
using global::org.acplt.oncrpc;

using System.Net;

/**
 * The class <code>demoClient</code> implements the client stub proxy
 * for the DEMO remote program. It provides method stubs
 * which, when called, in turn call the appropriate remote method (procedure).
 */
public class demoClient : OncRpcClientStub {

    /**
     * Constructs a <code>demoClient</code> client stub proxy object
     * from which the DEMO remote program can be accessed.
     * @param host Internet address of host where to contact the remote program.
     * @param protocol {@link org.acplt.oncrpc.OncRpcProtocols Protocol} to be
     *   used for ONC/RPC calls.
     * @throws OncRpcException if an ONC/RPC error occurs.
     * @throws IOException if an I/O error occurs.
     */
    public demoClient(IPAddress host, int protocol) :         base(host, demo.DEMO, 2, 0, protocol) {
    }

    /**
     * Constructs a <code>demoClient</code> client stub proxy object
     * from which the DEMO remote program can be accessed.
     * @param host Internet address of host where to contact the remote program.
     * @param port Port number at host where the remote program can be reached.
     * @param protocol {@link org.acplt.oncrpc.OncRpcProtocols Protocol} to be
     *   used for ONC/RPC calls.
     * @throws OncRpcException if an ONC/RPC error occurs.
     * @throws IOException if an I/O error occurs.
     */
    public demoClient(IPAddress host, int port, int protocol) :        base(host, demo.DEMO, 2, port, protocol) {
    }

    /**
     * Constructs a <code>demoClient</code> client stub proxy object
     * from which the DEMO remote program can be accessed.
     * @param client ONC/RPC client connection object implementing a particular
     *   protocol.
     * @throws OncRpcException if an ONC/RPC error occurs.
     * @throws IOException if an I/O error occurs.
     */
    public demoClient(OncRpcClient client) : base(client) {
    }

    /**
     * Constructs a <code>demoClient</code> client stub proxy object
     * from which the DEMO remote program can be accessed.
     * @param host Internet address of host where to contact the remote program.
     * @param program Remote program number.
     * @param version Remote program version number.
     * @param protocol {@link org.acplt.oncrpc.OncRpcProtocols Protocol} to be
     *   used for ONC/RPC calls.
     * @throws OncRpcException if an ONC/RPC error occurs.
     * @throws IOException if an I/O error occurs.
     */
    public demoClient(IPAddress host, int program, int version, int protocol) :        base(host, program, version, 0, protocol) {
    }

    /**
     * Constructs a <code>demoClient</code> client stub proxy object
     * from which the DEMO remote program can be accessed.
     * @param host Internet address of host where to contact the remote program.
     * @param program Remote program number.
     * @param version Remote program version number.
     * @param port Port number at host where the remote program can be reached.
     * @param protocol {@link org.acplt.oncrpc.OncRpcProtocols Protocol} to be
     *   used for ONC/RPC calls.
     * @throws OncRpcException if an ONC/RPC error occurs.
     * @throws IOException if an I/O error occurs.
     */
    public demoClient(IPAddress host, int program, int version, int port, int protocol) :        base(host, program, version, port, protocol) {
    }

    /**
     * Call remote procedure NULL_1.
     * @throws OncRpcException if an ONC/RPC error occurs.
     * @throws IOException if an I/O error occurs.
     */
    public void NULL_1() {
        XdrVoid args_ = XdrVoid.XDR_VOID;
        XdrVoid result_ = XdrVoid.XDR_VOID;
        client.call(demo.NULL_1, demo.FIRST_DEMO_VERSION, args_, result_);
    }

    /**
     * Call remote procedure echo_1.
     * @param arg1 parameter (of type string) to the remote procedure call.
     * @return Result from remote procedure call (of type string).
     * @throws OncRpcException if an ONC/RPC error occurs.
     * @throws IOException if an I/O error occurs.
     */
    public string echo_1(string arg1) {
        XdrString args_ = new XdrString(arg1);
        XdrString result_ = new XdrString();
        client.call(demo.echo_1, demo.FIRST_DEMO_VERSION, args_, result_);
        return result_.stringValue();
    }

    /**
     * Call remote procedure concat_1.
     * @param arg1 parameter (of type STRINGVECTOR) to the remote procedure call.
     * @return Result from remote procedure call (of type string).
     * @throws OncRpcException if an ONC/RPC error occurs.
     * @throws IOException if an I/O error occurs.
     */
    public string concat_1(STRINGVECTOR arg1) {
        XdrString result_ = new XdrString();
        client.call(demo.concat_1, demo.FIRST_DEMO_VERSION, arg1, result_);
        return result_.stringValue();
    }

    /**
     * Call remote procedure checkfoo_1.
     * @param arg1 parameter (of type ENUMFOO) to the remote procedure call.
     * @return Result from remote procedure call (of type bool).
     * @throws OncRpcException if an ONC/RPC error occurs.
     * @throws IOException if an I/O error occurs.
     */
    public bool checkfoo_1(int arg1) {
        XdrInt args_ = new XdrInt(arg1);
        XdrBoolean result_ = new XdrBoolean();
        client.call(demo.checkfoo_1, demo.FIRST_DEMO_VERSION, args_, result_);
        return result_.boolValue();
    }

    /**
     * Call remote procedure foo_1.
     * @return Result from remote procedure call (of type ENUMFOO).
     * @throws OncRpcException if an ONC/RPC error occurs.
     * @throws IOException if an I/O error occurs.
     */
    public int foo_1() {
        XdrVoid args_ = XdrVoid.XDR_VOID;
        XdrInt result_ = new XdrInt();
        client.call(demo.foo_1, demo.FIRST_DEMO_VERSION, args_, result_);
        return result_.intValue();
    }

    /**
     * Call remote procedure ll_1.
     * @param arg1 parameter (of type LINKEDLIST) to the remote procedure call.
     * @return Result from remote procedure call (of type LINKEDLIST).
     * @throws OncRpcException if an ONC/RPC error occurs.
     * @throws IOException if an I/O error occurs.
     */
    public LINKEDLIST ll_1(LINKEDLIST arg1) {
        LINKEDLIST result_ = new LINKEDLIST();
        client.call(demo.ll_1, demo.FIRST_DEMO_VERSION, arg1, result_);
        return result_;
    }

    /**
     * Call remote procedure readSomeResult_1.
     * @return Result from remote procedure call (of type SOMERESULT).
     * @throws OncRpcException if an ONC/RPC error occurs.
     * @throws IOException if an I/O error occurs.
     */
    public SOMERESULT readSomeResult_1() {
        XdrVoid args_ = XdrVoid.XDR_VOID;
        SOMERESULT result_ = new SOMERESULT();
        client.call(demo.readSomeResult_1, demo.FIRST_DEMO_VERSION, args_, result_);
        return result_;
    }

    /**
     * Call remote procedure NULL_2.
     * @throws OncRpcException if an ONC/RPC error occurs.
     * @throws IOException if an I/O error occurs.
     */
    public void NULL_2() {
        XdrVoid args_ = XdrVoid.XDR_VOID;
        XdrVoid result_ = XdrVoid.XDR_VOID;
        client.call(demo.NULL_2, demo.SECOND_DEMO_VERSION, args_, result_);
    }

        class XdrAble_42: XdrAble {
            public string arg1;
            public string arg2;
            public void xdrEncode(XdrEncodingStream xdr) {
                xdr.xdrEncodeString(arg1);
                xdr.xdrEncodeString(arg2);
            }
            public void xdrDecode(XdrDecodingStream xdr) {
            }
        };
    /**
     * Call remote procedure cat_2.
     * @param arg1 parameter (of type string) to the remote procedure call.
     * @param arg2 parameter (of type string) to the remote procedure call.
     * @return Result from remote procedure call (of type string).
     * @throws OncRpcException if an ONC/RPC error occurs.
     * @throws IOException if an I/O error occurs.
     */
    public string cat_2(string arg1, string arg2) {
        XdrAble_42 args_ = new XdrAble_42();
        args_.arg1 = arg1;
        args_.arg2 = arg2;
        XdrString result_ = new XdrString();
        client.call(demo.cat_2, demo.SECOND_DEMO_VERSION, args_, result_);
        return result_.stringValue();
    }

        class XdrAble_43: XdrAble {
            public string one;
            public string two;
            public string three;
            public void xdrEncode(XdrEncodingStream xdr) {
                xdr.xdrEncodeString(one);
                xdr.xdrEncodeString(two);
                xdr.xdrEncodeString(three);
            }
            public void xdrDecode(XdrDecodingStream xdr) {
            }
        };
    /**
     * Call remote procedure cat3_2.
     * @param one parameter (of type string) to the remote procedure call.
     * @param two parameter (of type string) to the remote procedure call.
     * @param three parameter (of type string) to the remote procedure call.
     * @return Result from remote procedure call (of type string).
     * @throws OncRpcException if an ONC/RPC error occurs.
     * @throws IOException if an I/O error occurs.
     */
    public string cat3_2(string one, string two, string three) {
        XdrAble_43 args_ = new XdrAble_43();
        args_.one = one;
        args_.two = two;
        args_.three = three;
        XdrString result_ = new XdrString();
        client.call(demo.cat3_2, demo.SECOND_DEMO_VERSION, args_, result_);
        return result_.stringValue();
    }

    /**
     * Call remote procedure checkfoo_2.
     * @param foo parameter (of type ENUMFOO) to the remote procedure call.
     * @return Result from remote procedure call (of type string).
     * @throws OncRpcException if an ONC/RPC error occurs.
     * @throws IOException if an I/O error occurs.
     */
    public string checkfoo_2(int foo) {
        XdrInt args_ = new XdrInt(foo);
        XdrString result_ = new XdrString();
        client.call(demo.checkfoo_2, demo.SECOND_DEMO_VERSION, args_, result_);
        return result_.stringValue();
    }

        class XdrAble_55: XdrAble {
            public LINKEDLIST l1;
            public LINKEDLIST l2;
            public void xdrEncode(XdrEncodingStream xdr) {
                l1.xdrEncode(xdr);
                l2.xdrEncode(xdr);
            }
            public void xdrDecode(XdrDecodingStream xdr) {
            }
        };
    /**
     * Call remote procedure llcat_2.
     * @param l1 parameter (of type LINKEDLIST) to the remote procedure call.
     * @param l2 parameter (of type LINKEDLIST) to the remote procedure call.
     * @return Result from remote procedure call (of type LINKEDLIST).
     * @throws OncRpcException if an ONC/RPC error occurs.
     * @throws IOException if an I/O error occurs.
     */
    public LINKEDLIST llcat_2(LINKEDLIST l1, LINKEDLIST l2) {
        XdrAble_55 args_ = new XdrAble_55();
        args_.l1 = l1;
        args_.l2 = l2;
        LINKEDLIST result_ = new LINKEDLIST();
        client.call(demo.llcat_2, demo.SECOND_DEMO_VERSION, args_, result_);
        return result_;
    }

        class XdrAble_71: XdrAble {
            public double a;
            public double b;
            public void xdrEncode(XdrEncodingStream xdr) {
                xdr.xdrEncodeDouble(a);
                xdr.xdrEncodeDouble(b);
            }
            public void xdrDecode(XdrDecodingStream xdr) {
            }
        };
    /**
     * Call remote procedure mult_2.
     * @param a parameter (of type double) to the remote procedure call.
     * @param b parameter (of type double) to the remote procedure call.
     * @return Result from remote procedure call (of type double).
     * @throws OncRpcException if an ONC/RPC error occurs.
     * @throws IOException if an I/O error occurs.
     */
    public double mult_2(double a, double b) {
        XdrAble_71 args_ = new XdrAble_71();
        args_.a = a;
        args_.b = b;
        XdrDouble result_ = new XdrDouble();
        client.call(demo.mult_2, demo.SECOND_DEMO_VERSION, args_, result_);
        return result_.doubleValue();
    }

        class XdrAble_100: XdrAble {
            public string a;
            public int b;
            public int c;
            public int d;
            public void xdrEncode(XdrEncodingStream xdr) {
                xdr.xdrEncodeString(a);
                xdr.xdrEncodeInt(b);
                xdr.xdrEncodeInt(c);
                xdr.xdrEncodeInt(d);
            }
            public void xdrDecode(XdrDecodingStream xdr) {
            }
        };
    /**
     * Call remote procedure test_2.
     * @param a parameter (of type string) to the remote procedure call.
     * @param b parameter (of type ENUMFOO) to the remote procedure call.
     * @param c parameter (of type ENUMFOO) to the remote procedure call.
     * @param d parameter (of type int) to the remote procedure call.
     * @throws OncRpcException if an ONC/RPC error occurs.
     * @throws IOException if an I/O error occurs.
     */
    public void test_2(string a, int b, int c, int d) {
        XdrAble_100 args_ = new XdrAble_100();
        args_.a = a;
        args_.b = b;
        args_.c = c;
        args_.d = d;
        XdrVoid result_ = XdrVoid.XDR_VOID;
        client.call(demo.test_2, demo.SECOND_DEMO_VERSION, args_, result_);
    }

        class XdrAble_121: XdrAble {
            public SILLYSTRUCT src;
            public int a;
            public string b;
            public void xdrEncode(XdrEncodingStream xdr) {
                src.xdrEncode(xdr);
                xdr.xdrEncodeInt(a);
                xdr.xdrEncodeString(b);
            }
            public void xdrDecode(XdrDecodingStream xdr) {
            }
        };
    /**
     * Call remote procedure test_marshal_2.
     * @param src parameter (of type SILLYSTRUCT) to the remote procedure call.
     * @param a parameter (of type int) to the remote procedure call.
     * @param b parameter (of type string) to the remote procedure call.
     * @return Result from remote procedure call (of type SILLYSTRUCT).
     * @throws OncRpcException if an ONC/RPC error occurs.
     * @throws IOException if an I/O error occurs.
     */
    public SILLYSTRUCT test_marshal_2(SILLYSTRUCT src, int a, string b) {
        XdrAble_121 args_ = new XdrAble_121();
        args_.src = src;
        args_.a = a;
        args_.b = b;
        SILLYSTRUCT result_ = new SILLYSTRUCT();
        client.call(demo.test_marshal_2, demo.SECOND_DEMO_VERSION, args_, result_);
        return result_;
    }

}
} //End of Namespace tests.org.acplt.oncrpc.jrpcgen
// End of demoClient.cs
