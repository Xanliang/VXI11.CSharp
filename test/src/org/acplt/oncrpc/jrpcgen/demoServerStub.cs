/*
 * Automatically generated by jrpcgen 1.0.7 on 2021/9/14
 * jrpcgen is part of the "Remote Tea.Net" ONC/RPC package for C#
 * See http://remotetea.sourceforge.net for details
 */
namespace tests.org.acplt.oncrpc.jrpcgen{
using global::org.acplt.oncrpc;

using System.Net;

using global::org.acplt.oncrpc.server;

/**
 */
public abstract class demoServerStub : OncRpcServerStub, OncRpcDispatchable {

    public demoServerStub() : this(0) {
    }

    public demoServerStub(int port) : this(null, port) {
    }

    public demoServerStub(IPAddress bindAddr, int port)
           {
        info = new OncRpcServerTransportRegistrationInfo [] {
            new OncRpcServerTransportRegistrationInfo(demo.DEMO, 1),
            new OncRpcServerTransportRegistrationInfo(demo.DEMO, 2),
        };
        transports = new OncRpcServerTransport [] {
            new OncRpcUdpServerTransport(this, bindAddr, port, info, 32768),
            new OncRpcTcpServerTransport(this, bindAddr, port, info, 32768)
        };
    }

                class XdrAble_42 : XdrAble {
                    public string arg1;
                    public string arg2;
                    public void xdrEncode(XdrEncodingStream xdr) {
                    }
                    public void xdrDecode(XdrDecodingStream xdr) {
                        arg1 = xdr.xdrDecodeString();
                        arg2 = xdr.xdrDecodeString();
                    }
                };
                class XdrAble_43 : XdrAble {
                    public string one;
                    public string two;
                    public string three;
                    public void xdrEncode(XdrEncodingStream xdr) {
                    }
                    public void xdrDecode(XdrDecodingStream xdr) {
                        one = xdr.xdrDecodeString();
                        two = xdr.xdrDecodeString();
                        three = xdr.xdrDecodeString();
                    }
                };
                class XdrAble_55 : XdrAble {
                    public LINKEDLIST l1;
                    public LINKEDLIST l2;
                    public void xdrEncode(XdrEncodingStream xdr) {
                    }
                    public void xdrDecode(XdrDecodingStream xdr) {
                        l1 = new LINKEDLIST(xdr);
                        l2 = new LINKEDLIST(xdr);
                    }
                };
                class XdrAble_71 : XdrAble {
                    public double a;
                    public double b;
                    public void xdrEncode(XdrEncodingStream xdr) {
                    }
                    public void xdrDecode(XdrDecodingStream xdr) {
                        a = xdr.xdrDecodeDouble();
                        b = xdr.xdrDecodeDouble();
                    }
                };
                class XdrAble_100 : XdrAble {
                    public string a;
                    public int b;
                    public int c;
                    public int d;
                    public void xdrEncode(XdrEncodingStream xdr) {
                    }
                    public void xdrDecode(XdrDecodingStream xdr) {
                        a = xdr.xdrDecodeString();
                        b = xdr.xdrDecodeInt();
                        c = xdr.xdrDecodeInt();
                        d = xdr.xdrDecodeInt();
                    }
                };
                class XdrAble_121 : XdrAble {
                    public SILLYSTRUCT src;
                    public int a;
                    public string b;
                    public void xdrEncode(XdrEncodingStream xdr) {
                    }
                    public void xdrDecode(XdrDecodingStream xdr) {
                        src = new SILLYSTRUCT(xdr);
                        a = xdr.xdrDecodeInt();
                        b = xdr.xdrDecodeString();
                    }
                };
    public void dispatchOncRpcCall(OncRpcCallInformation call, int program, int version, int procedure)
            {
        if ( version == 1 ) {
            switch ( procedure ) {
            case 0: {
                call.retrieveCall(XdrVoid.XDR_VOID);
                NULL_1();
                call.reply(XdrVoid.XDR_VOID);
                break;
            }
            case 1: {
                XdrString args_ = new XdrString();
                call.retrieveCall(args_);
                XdrString result_ = new XdrString(Echo_1(args_.stringValue()));
                call.reply(result_);
                break;
            }
            case 2: {
                STRINGVECTOR args_ = new STRINGVECTOR();
                call.retrieveCall(args_);
                XdrString result_ = new XdrString(Concat_1(args_));
                call.reply(result_);
                break;
            }
            case 3: {
                XdrInt args_ = new XdrInt();
                call.retrieveCall(args_);
                XdrBoolean result_ = new XdrBoolean(Checkfoo_1(args_.intValue()));
                call.reply(result_);
                break;
            }
            case 4: {
                call.retrieveCall(XdrVoid.XDR_VOID);
                XdrInt result_ = new XdrInt(Foo_1());
                call.reply(result_);
                break;
            }
            case 5: {
                LINKEDLIST args_ = new LINKEDLIST();
                call.retrieveCall(args_);
                LINKEDLIST result_ = Ll_1(args_);
                call.reply(result_);
                break;
            }
            case 42: {
                call.retrieveCall(XdrVoid.XDR_VOID);
                SOMERESULT result_ = ReadSomeResult_1();
                call.reply(result_);
                break;
            }
            default:
                call.failProcedureUnavailable();
                break;
            }
        } else if ( version == 2 ) {
            switch ( procedure ) {
            case 0: {
                call.retrieveCall(XdrVoid.XDR_VOID);
                NULL_2();
                call.reply(XdrVoid.XDR_VOID);
                break;
            }
            case 42: {
                XdrAble_42 args_ = new XdrAble_42();
                call.retrieveCall(args_);
                XdrString result_ = new XdrString(Cat_2(args_.arg1, args_.arg2));
                call.reply(result_);
                break;
            }
            case 43: {
                XdrAble_43 args_ = new XdrAble_43();
                call.retrieveCall(args_);
                XdrString result_ = new XdrString(Cat3_2(args_.one, args_.two, args_.three));
                call.reply(result_);
                break;
            }
            case 3: {
                XdrInt args_ = new XdrInt();
                call.retrieveCall(args_);
                XdrString result_ = new XdrString(Checkfoo_2(args_.intValue()));
                call.reply(result_);
                break;
            }
            case 55: {
                XdrAble_55 args_ = new XdrAble_55();
                call.retrieveCall(args_);
                LINKEDLIST result_ = Llcat_2(args_.l1, args_.l2);
                call.reply(result_);
                break;
            }
            case 71: {
                XdrAble_71 args_ = new XdrAble_71();
                call.retrieveCall(args_);
                XdrDouble result_ = new XdrDouble(Mult_2(args_.a, args_.b));
                call.reply(result_);
                break;
            }
            case 100: {
                XdrAble_100 args_ = new XdrAble_100();
                call.retrieveCall(args_);
                Test_2(args_.a, args_.b, args_.c, args_.d);
                call.reply(XdrVoid.XDR_VOID);
                break;
            }
            case 121: {
                XdrAble_121 args_ = new XdrAble_121();
                call.retrieveCall(args_);
                SILLYSTRUCT result_ = Test_marshal_2(args_.src, args_.a, args_.b);
                call.reply(result_);
                break;
            }
            default:
                call.failProcedureUnavailable();
                break;
            }
        } else {
            call.failProgramUnavailable();
        }
    }

    public abstract void NULL_1();

    public abstract string Echo_1(string arg1);

    public abstract string Concat_1(STRINGVECTOR arg1);

    public abstract bool Checkfoo_1(int arg1);

    public abstract int Foo_1();

    public abstract LINKEDLIST Ll_1(LINKEDLIST arg1);

    public abstract SOMERESULT ReadSomeResult_1();

    public abstract void NULL_2();

    public abstract string Cat_2(string arg1, string arg2);

    public abstract string Cat3_2(string one, string two, string three);

    public abstract string Checkfoo_2(int foo);

    public abstract LINKEDLIST Llcat_2(LINKEDLIST l1, LINKEDLIST l2);

    public abstract double Mult_2(double a, double b);

    public abstract void Test_2(string a, int b, int c, int d);

    public abstract SILLYSTRUCT Test_marshal_2(SILLYSTRUCT src, int a, string b);

}
} //End of Namespace tests.org.acplt.oncrpc.jrpcgen
// End of demoServerStub.cs
                      

